I"Î<p>Visit <a href="https://www.dataquest.io/blog/a-complete-guide-to-python-virtual-environments/">dataquest</a> for a more in-depth overview of what python virtual environments are, as well as 
what advantages they promise.</p>

<h3 style="margin-top: 1.8em">Creating a Python Virtual Environment (Windows)</h3>
<!-- #; font-size: 14px -->

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">py</span> <span class="o">-</span><span class="n">m</span> <span class="n">venv</span> <span class="p">[</span><span class="s1">'/path/to/new/virtual/environment'</span><span class="p">]</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Activating a Python Virtual Environment</h3>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">[</span><span class="s1">'/path/to/new/virtual/environment'</span><span class="p">]\</span><span class="n">scripts</span><span class="p">\</span><span class="n">activate</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Installing Packages in a Python Virtual Environment</h3>
<p>By default, only pip and setup tools are initially installed. To check the pre-installed packages:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">pip</span> <span class="n">list</span></code></pre></figure>

<p>To upgrade pip:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">py</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pip</span></code></pre></figure>

<p>To install new packages:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">py</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">pandas</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Reproducing a Python Virtual Environment</h3>
<p>You first need to list all the dependencies installed. Export the package list into a requirements.txt file</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">pip</span> <span class="nb">freeze</span> <span class="o">&gt;</span> <span class="n">requirements</span><span class="p">.</span><span class="nf">txt</span></code></pre></figure>

<p>Create a virtual environment, activate it, and then run:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="nf">txt</span></code></pre></figure>

<p>Note:</p>
<blockquote>
  <p>If youâ€™re going to add your project to a Git repository, never add its virtual environment folder to the repository. The only thing you need to add is the requirements.txt file.</p>
</blockquote>

<blockquote>
  <p>A Python project folder contains source code that runs in a virtual environment. On the other hand, a virtual environment is a folder that contains the Python interpreter, packages, and tools like pip. So, the best practice is to keep them separate and never put your project files in a virtual environment folder.</p>
</blockquote>

<h3 style="margin-top: 1.8em">Deactivating a Python Virtual Environment</h3>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">deactivate</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Deleting a Python Virtual Environment</h3>
<p>If you want to delete a virtual environment, you can simply delete its folder, no uninstall required</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="p">[</span><span class="s1">'/path/to/new/virtual/environment'</span><span class="p">]</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Use Python Virtual Environments in Visual Studio Code</h3>
<p>First, ensure you have created and activated a virtual environment.<br />
Then navigate to your project folder in the terminal <br /> 
and run the following command:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">code</span> <span class="o">.</span></code></pre></figure>

<p>The command above will open the project folder in VS Code. If the command above doesnâ€™t work, open VS code, press command + shift + P, to open the Command Palette, type shell command and select Install â€˜codeâ€™ command in PATH. Now, create a Python file, and name it my_script.py. The last step is to select the virtual environment using the Python: Select Interpreter command from the Command Palette. To do so, press Command + shift + P, and type Python, and choose Select Interpreter.
The Python: Select Interpreter command displays all available environments.</p>

:ET