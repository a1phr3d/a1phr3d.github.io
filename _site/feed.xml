<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-05T20:35:32-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alfred Adjei-Darko</title><subtitle>Personal Website of Alfred Adjei-Darko</subtitle><entry><title type="html">Python Virtual Environments</title><link href="http://localhost:4000/posts/2022-11-19-python-virtual-environments" rel="alternate" type="text/html" title="Python Virtual Environments" /><published>2022-11-19T20:14:00-05:00</published><updated>2022-11-19T20:14:00-05:00</updated><id>http://localhost:4000/posts/python-virtual-environments</id><content type="html" xml:base="http://localhost:4000/posts/2022-11-19-python-virtual-environments"><![CDATA[<p>Visit <a href="https://www.dataquest.io/blog/a-complete-guide-to-python-virtual-environments/">dataquest</a> for a more in-depth overview of what python virtual environments are, as well as 
what advantages they promise.</p>

<h3 style="margin-top: 1.8em">Creating a Python Virtual Environment (Windows)</h3>
<!-- #; font-size: 14px -->

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">py</span> <span class="o">-</span><span class="n">m</span> <span class="n">venv</span> <span class="p">[</span><span class="s1">'/path/to/new/virtual/environment'</span><span class="p">]</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Activating a Python Virtual Environment</h3>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">[</span><span class="s1">'/path/to/new/virtual/environment'</span><span class="p">]\</span><span class="n">scripts</span><span class="p">\</span><span class="n">activate</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Installing Packages in a Python Virtual Environment</h3>
<p>By default, only pip and setup tools are initially installed. To check the pre-installed packages:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">pip</span> <span class="n">list</span></code></pre></figure>

<p>To upgrade pip:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">py</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">pip</span></code></pre></figure>

<p>To install new packages:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">py</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">pandas</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Reproducing a Python Virtual Environment</h3>
<p>You first need to list all the dependencies installed. Export the package list into a requirements.txt file</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">pip</span> <span class="nb">freeze</span> <span class="o">&gt;</span> <span class="n">requirements</span><span class="p">.</span><span class="nf">txt</span></code></pre></figure>

<p>Create a virtual environment, activate it, and then run:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="nf">txt</span></code></pre></figure>

<p>Note:</p>
<blockquote>
  <p>If you’re going to add your project to a Git repository, never add its virtual environment folder to the repository. The only thing you need to add is the requirements.txt file.</p>
</blockquote>

<blockquote>
  <p>A Python project folder contains source code that runs in a virtual environment. On the other hand, a virtual environment is a folder that contains the Python interpreter, packages, and tools like pip. So, the best practice is to keep them separate and never put your project files in a virtual environment folder.</p>
</blockquote>

<h3 style="margin-top: 1.8em">Deactivating a Python Virtual Environment</h3>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">deactivate</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Deleting a Python Virtual Environment</h3>
<p>If you want to delete a virtual environment, you can simply delete its folder, no uninstall required</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="p">[</span><span class="s1">'/path/to/new/virtual/environment'</span><span class="p">]</span></code></pre></figure>

<h3 style="margin-top: 1.8em">Use Python Virtual Environments in Visual Studio Code</h3>
<p>First, ensure you have created and activated a virtual environment.<br />
Then navigate to your project folder in the terminal <br /> 
and run the following command:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">code</span> <span class="o">.</span></code></pre></figure>

<p>The command above will open the project folder in VS Code. If the command above doesn’t work, open VS code, press command + shift + P, to open the Command Palette, type shell command and select Install ‘code’ command in PATH. Now, create a Python file, and name it my_script.py. The last step is to select the virtual environment using the Python: Select Interpreter command from the Command Palette. To do so, press Command + shift + P, and type Python, and choose Select Interpreter.
The Python: Select Interpreter command displays all available environments.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Visit dataquest for a more in-depth overview of what python virtual environments are, as well as what advantages they promise.]]></summary></entry><entry><title type="html">Notable Computing Experts</title><link href="http://localhost:4000/posts/2022-09-16-notable-computing-experts" rel="alternate" type="text/html" title="Notable Computing Experts" /><published>2022-09-16T17:14:53-04:00</published><updated>2022-09-16T17:14:53-04:00</updated><id>http://localhost:4000/posts/notable-computing-experts</id><content type="html" xml:base="http://localhost:4000/posts/2022-09-16-notable-computing-experts"><![CDATA[<p><a href="https://tdhopper.com/">Tim Hopper</a> adapted Tim Peters’ <i>Zen of Python</i> for git in <i>Zen of Git</i>.
I have collected both here</p>

<ul>
    <li><a href="https://www.python.org/dev/peps/pep-0020/">Zen of Python</a></li>
    <li><a href="https://tdhopper.com/blog/zen-of-git">Zen of Git</a></li>
</ul>

<!-- 
You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ -->]]></content><author><name></name></author><summary type="html"><![CDATA[Tim Hopper adapted Tim Peters’ Zen of Python for git in Zen of Git. I have collected both here]]></summary></entry><entry><title type="html">Zen of Computing</title><link href="http://localhost:4000/posts/2022-02-19-zen-of-computing" rel="alternate" type="text/html" title="Zen of Computing" /><published>2022-02-19T17:14:53-05:00</published><updated>2022-02-19T17:14:53-05:00</updated><id>http://localhost:4000/posts/zen-of-computing</id><content type="html" xml:base="http://localhost:4000/posts/2022-02-19-zen-of-computing"><![CDATA[<p><a href="https://tdhopper.com/">Tim Hopper</a> adapted Tim Peters’ <i>Zen of Python</i> for git in <i>Zen of Git</i>.
I have collected both here</p>

<ul>
    <li><a href="https://www.python.org/dev/peps/pep-0020/">Zen of Python</a></li>
    <li><a href="https://tdhopper.com/blog/zen-of-git">Zen of Git</a></li>
</ul>

<!-- 
You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ -->]]></content><author><name></name></author><summary type="html"><![CDATA[Tim Hopper adapted Tim Peters’ Zen of Python for git in Zen of Git. I have collected both here]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/posts/2021-05-30-welcome-to-jekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-05-30T14:36:53-04:00</published><updated>2021-05-30T14:36:53-04:00</updated><id>http://localhost:4000/posts/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/posts/2021-05-30-welcome-to-jekyll"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>